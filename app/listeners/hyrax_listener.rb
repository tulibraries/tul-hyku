# frozen_string_literal: true

##
# Generated by hyrax:listeners
#
# The Hyrax engine uses a publish/subscribe programming model to allow
# pluggable behavior in response to certain repository events. A range of events
# are published on a topic based event bus.
#
# This listener provides a template.
#
# For simple use cases, it's fine to add behavior to the `#on_*` methods in this
# Listener. If you have more than trivial behavior here, you probably want to add
# new classes that are named narrowly scoped and named for what the listener is
# for.
#
# When writing listener methods, it's important to carefully consider error,
# handling. Unhandled exceptions short-circuit behavior for other listeners,
# so it's a good idea to be paying attention to failure cases.
#
# @see https://github.com/samvera/hyrax/wiki/Hyrax's-Event-Bus-(Hyrax::Publisher)
# @see https://www.rubydoc.info/gems/hyrax/Hyrax/Publisher
# @see https://dry-rb.org/gems/dry-events
class HyraxListener
  # def on_batch_created
  # end

  ##
  # Remove the event's associated collection from the {FeaturedCollection}.
  #
  # @param event [Dry::Events::Event]
  #
  # @see FeaturedCollection.destroy_for
  def on_collection_deleted(event)
    collection = event[:collection]
    return false unless collection

    FeaturedCollection.destroy_for(collection:)
  end

  ##
  # Conditionally remove the event's associated collection from the {FeaturedCollection}.
  #
  # @param event [Dry::Events::Event]
  #
  # @see FeaturedCollection.destroy_for
  def on_collection_metadata_updated(event)
    collection = event[:collection]
    return false unless collection
    return false unless collection.private?

    FeaturedCollection.destroy_for(collection:)
  end

  # def on_collection_membership_update
  # end

  def on_file_characterized(event)
    pdf_viewer_and_download_button(event)
  end

  # def on_file_downloaded
  # end

  # def on_file_metadata_updated
  # end

  # def on_file_metadata_deleted
  # end

  # def on_file_uploaded
  # end

  # def on_file_set_audited
  # end

  # def on_file_set_attached
  # end

  # def on_file_set_url_imported
  # end

  # def on_file_set_restored
  # end

  # def on_object_deleted
  # end

  # def on_object_failed_deposit
  # end

  # def on_object_deposited
  # end

  # def on_object_acl_updated
  # end

  # def on_object_membership_updated
  # end

  # def on_object_metadata_updated
  # end

  private

  def pdf_viewer_and_download_button(event)
    file_set = event[:file_set]
    return unless file_set.original_file.pdf?

    parent_work = Hyrax.custom_queries.find_parent_work(resource: file_set)
    parent_work.show_pdf_viewer = '1'
    parent_work.show_pdf_download_button = '1'

    Hyrax.persister.save(resource: parent_work)
  end
end
